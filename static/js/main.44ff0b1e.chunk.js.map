{"version":3,"sources":["logo.svg","components/cell.jsx","components/clue.jsx","components/clues.jsx","components/game.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","cell","x","y","solution","number","solved","type","functions","cellToWords","cellToClue","fillCell","checkCells","toggleSolved","useState","text","setText","className","id","onChange","e","value","currentTarget","toUpperCase","length","words","check1","check2","Clue","clue","direction","word","Clues","clues","across","filter","down","clueToWord","map","idx","Game","cells","setCells","setClues","setWords","useEffect","fetch","headers","then","res","json","data","forEach","convertWordToCells","i","push","find","convertXYtoIdx","j","split","num","Number","str","join","newCells","wordId","obj","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44ff0b1e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect} from \"react\";\n\nexport default function Cell(props) {\n    const {x,y,solution, number, type, solved} = props.cell\n    const {cellToClue, cellToWords, fillCell, checkCells, toggleSolved} = props.functions\n    const [text, setText] = useState(\"\")\n\n    const handleChange = (e) => {\n        const value = e.currentTarget.value.toUpperCase()\n        if (value.length <= 1) {\n            setText(value)\n            fillCell(x,y,value) \n            const words = cellToWords(x,y)\n            const check1 = checkCells(words[0])\n            const check2 = checkCells(words[1])\n            if (check1) toggleSolved(words[0], true,x,y);\n            if (check2) toggleSolved(words[1], true,x,y);\n            if (!(check1 || check2)) {\n                toggleSolved(words[0], false, x,y)\n                toggleSolved(words[1], false, x,y)\n            };\n         } else return;\n    };\n\n    return(\n            solution ? \n            <div className={`cell ${solved ? \"solved\" : false}`}id={`${x},${y}`}>\n                <div className=\"cell-number\">\n                    {number} {solved}\n                </div>\n                <input className=\"cell-letter\" onChange={handleChange} value={text}>\n                </input>\n            </div> :\n            <div className=\"cell-black\"></div>\n    )\n}\n","import React from \"react\";\n\nexport default function Clue(props) {\n    const {direction, text, word, number} = props.clue\n    return(\n        <div className=\"clue\">\n            <span className=\"number\">{number}</span>\n            <span className=\"text\">{text}</span>\n        </div>\n    )\n}","import React, {useState, useEffect} from \"react\";\nimport Clue from \"./clue\";\n\nexport default function Clues(props) {\n    const {clues} = props\n    const across = clues.filter(clue => clue.direction === 0)\n    const down = clues.filter(clue => clue.direction === 1)\n    const {clueToWord} = props.functions\n\n    return(\n        <div className=\"clues-container\">\n            <div className=\"across\">\n                <h2 className=\"clues-header\">Across</h2>\n                {across.map((clue, idx) => <Clue key={idx} clue={clue} />)}\n            </div>\n            <div className=\"down\">\n                <h2 className=\"clues-header\">Down</h2>\n                {down.map((clue, idx) => <Clue key={idx} clue={clue} />)}\n            </div>\n        </div>\n    )\n}","import React, {useState, useEffect} from \"react\";\nimport Cell from \"./cell\";\nimport Clues from \"./clues\";\n// useEffect is similar to componentDidMount\n// pass [] as second argument to useEffect to make it only run once\n\nexport default function Game() {\n    const [cells, setCells] = useState([])\n    const [clues, setClues] = useState([])\n    const [words, setWords] = useState([])\n\n    const getData = () => {\n        fetch('crossword-puzzle.json', {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            } \n        })\n        .then(res => res.json())\n        .then(data => {\n            data.words.forEach(word => {\n                const idx = convertWordToCells(word)\n                // add index of all related squares to word object\n                word.cells = idx\n                for (const i of idx) {\n                // add word object to all related indices\n                !data.cells[i].word ? data.cells[i].word = [word] : data.cells[i].word.push(word)\n            }\n        })\n        setClues(data.clues)\n        setCells(data.cells)\n        setWords(data.words)\n        });\n    }\n\n    useEffect(() => getData(), []);\n\n    const cellToClue = (number) => { \n        const clue = clues.find(clue => clue.number === number)\n        return clue;\n    }\n\n    const clueToWord = (wordId) => {\n        const word = words.find(obj => obj.id == wordId)\n        return word; \n    }\n\n    // finds the word based on x,y of cell\n    const cellToWords = (x,y) => {\n        return cells[convertXYtoIdx(x,y)].word\n    }\n    \n    //converts x,y grid coordinates to an indice in cells array\n    const convertXYtoIdx = (x,y) => 15*(y-1)+(x-1);\n    \n    //converts the coordinates of a word into an array of indices\n    const convertWordToCells = word => {\n        let x = word.x.split(\"-\").map(num => Number(num))\n        let y = word.y.split(\"-\").map(num => Number(num))\n        \n        const idx = []\n        let i,j; \n        if (x.length > 1) {\n            [i, j]= [x[0], x[1]]\n            while (i <= j) {\n                idx.push(convertXYtoIdx(i, y))\n                i++\n            }\n        } else {\n            [i,j] = [y[0], y[1]]\n            while (i <= j) {\n                idx.push(convertXYtoIdx(x, i))\n                i++\n            }\n        }\n        return idx;\n    }\n    \n\n    // sets the \"value\" of a cell for use in checkCells(word)\n    const fillCell = (x,y, value) => {\n        cells[convertXYtoIdx(x,y)].value = value\n    }\n    \n    // check if every cell of word is filled and correct\n    const checkCells = word => {\n        const str = [] \n        word.cells.forEach(i => {\n            if (!cells[i].value) cells[i].value = \" \";\n            str.push(cells[i].value)\n        })\n        \n        if (str.join(\"\") == word.solution) {\n            return true;\n        } else {\n            return false\n        };\n    }\n\n    // highlights or unhighlights tiles depending on if word is solved\n    const toggleSolved = (word, solved, x, y) => {\n        let newCells = [...cells]\n        const idx = convertXYtoIdx(x,y)\n        word.cells.forEach(i => {\n            if (newCells[i].solved) {\n                const check1 = checkCells(newCells[i].word[0])\n                const check2 = checkCells(newCells[i].word[1])\n                if (!( check1 || check2)) newCells[i].solved = solved;\n            } else newCells[i].solved = solved;\n        })\n        setCells(newCells)\n    }\n\n    return(\n        <div className=\"game-container\">\n            <div className=\"grid\">\n                {cells.map((cell, i) => <Cell key={`${i}`} functions={{cellToClue, cellToWords, fillCell, checkCells, toggleSolved}} cell={cell}/>)}\n            </div>\n\n            {clues.length > 0 ?\n            <Clues key={clues.length} functions={{clueToWord}} clues={clues} /> :\n            null \n            }\n\n        </div>\n    )\n\n}","import logo from './logo.svg';\nimport Game from \"./components/game\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Game /> \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}